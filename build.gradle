import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'application'
    id 'maven-publish'
    id("org.sonarqube") version "3.3"
}

group = 'com.epsi'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

mainClassName = 'com.epsi.msprbackendresellers.MsprBackendResellersApplicationKt'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.springdoc:springdoc-openapi-webflux-ui:1.5.12"
    implementation 'org.json:json:20210307'
    implementation 'org.springframework.data:spring-data-mongodb:4.0.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation("org.springdoc:springdoc-openapi-data-rest:1.4.3")
    implementation("org.springdoc:springdoc-openapi-ui:1.4.3")
    implementation("org.springdoc:springdoc-openapi-kotlin:1.4.3")
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: '3.1.0.RELEASE'
    implementation 'com.sendgrid:sendgrid-java:4.9.3'
    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    repositories {
        // The target repository
        maven {
            // Choose whatever name you want
            name = "GitHubPackages"
            // The url of the repository, where the artifacts will be published
            url = "https://maven.pkg.github.com/tomwallyn/mspr-backend-resellers"
            credentials {
                // The credentials (described in the next section)
                username = System.getenv('MY_GITHUB_ACTOR')
                password = System.getenv('MY_GITHUB_TOKEN')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

sonarqube {
    def exclusions = [
            "**/src/test/**",
            "**/src/main/kotlin/**/models/**",
            "**/src/main/kotlin/**/application/**",
            "**/src/main/kotlin/**/dao/**",
            "**/src/main/kotlin/**/controllers/**",
            "**/src/main/kotlin/**/FiscalInventoryApplication.kt",
            "**/src/main/kotlin/**/utils/**",
            "**/src/main/kotlin/**/extensions/**",
            "**/src/main/kotlin/**/services/impl/PrinterServiceImpl.kt",
    ]
    properties {
        property 'sonar.projectKey', 'mspr-backend-resellers'
        property "sonar.coverage.exclusions", exclusions
        property 'sonar.dependencyCheck.jsonReportPath', 'build/reports/dependency-check-report.json'
        property 'sonar.dependencyCheck.htmlReportPath', 'build/reports/dependency-check-report.html'
    }
}
